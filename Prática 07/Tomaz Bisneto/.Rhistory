plot(sales,adv,type = "l", main = "Titulo do grafico ",xlab = "Descritor do eixo X",ylab = "Descritor Do eixo Y",xlim = c(200,808))
plot(sales~adv,type = "l", main = "Titulo do grafico ",xlab = "Descritor do eixo X",ylab = "Descritor Do eixo Y",xlim = c(200,600))
plot(sales~adv,type = "l", main = "Titulo do grafico ",xlab = "Descritor do eixo X",ylab = "Descritor Do eixo Y",xlim = c(200,900))
plot(sales~adv, main = "Titulo do grafico ",xlab = "Descritor do eixo X",ylab = "Descritor Do eixo Y",xlim = c(200,900))
plot(sales~adv, main = "Titulo do grafico ",xlab = "Descritor do eixo X",ylab = "Descritor Do eixo Y",font.main = 2, cex.main = 0.8,cex.lab = 0.8, cex.axis =0.8)
plot(sales~adv, main = "Titulo do grafico ",xlab = "Descritor do eixo X",ylab = "Descritor Do eixo Y",font.main = 2, cex.main = 0.8,cex.lab = 0.8, cex.axis =0.8, sub = "Teste de Subtitulo")
plot(sales~adv, main = "Titulo do grafico ",xlab = "Descritor do eixo X",ylab = "Descritor Do eixo Y",font.main = 2, cex.main = 0.8,cex.lab = 0.8, cex.axis =0.8, col="red",pch =5 )
grid(nx = 10, ny = 10 col = 'gray', lty = 'solid')
grid(nx = 10, ny = 10 col = 'gray', lty = 'solid')
grid(nx = 10, ny = 10, col = 'gray', lty = 'solid')
fit <- lm(sales~adv)
abline
ab
(fit)
(fit)
fit <- lm(sales~adv)
abline(fit)
profit <- c(73,100,85,115,140,165,120,150,195,190)
plot(profit~y)
plot(profit~years,type = 'l')
plot(profit~years,type = 'l')
plot(profit~years,type = "l")
plot(profit~years,type = "l")
years <- c(2007:2016)
profit <- c(73,100,85,115,140,165,120,150,195,190)
plot(profit~years,type = "l")
profit <- c(73,100,85,115,140,165,120,150,195,190)
profit <- c(73,100,85,115,140,165,120,150,195,190);
plot(profit~years,type = "l", main = "Titulo", xlab="Year",ylab = "profit", col = "red", lty = 4)
plot(profit~years,type = "l", main = "Titulo", xlab="Year",ylab = "profit", col = "red", lty = 2)
plot(profit~years,type = "l", main = "Titulo", xlab="Year",ylab = "profit", col = "red", lty = 8)
plot(profit~years,type = "l", main = "Titulo", xlab="Year",ylab = "profit", col = "red", lty =5)
plot(profit~years,type = "l", main = "Titulo", xlab="Year",ylab = "profit", col = "red", lty =6)
plot(profit~years,type = "l", main = "Titulo", xlab="Year",ylab = "profit", col = "red", lty =1)
plot(profit~years,type = "l", main = "Titulo", xlab="Year",ylab = "profit", col = "red", lty =4)
plot(profit~years,type = "s", main = "Titulo", xlab="Year",ylab = "profit", col = "red", lty =4)
profitA <- c(73,100,85,115,140,165,120,150,195,190)
profitB <- c(60,95,125,170,140,165,180,170,180,190)
plot(profitA~years,type = "l", col = "red", lwd =2)
line(profitA~years,type = "l", col = "blue", lwd =2)
lines(profitA~years,type = "l", col = "blue", lwd =2)
lines(profitB~years,type = "l", col = "blue", lwd =2)
plot(profitA~years,type = "l", col = "red", lwd =4)
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1)
lines(profitB~years,type = "l", col = "blue", lwd =4)
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1)
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1,cex=0.6)
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=0.6,title = "Profit")
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=0.6,title = "Profit")
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=0.6,title = "Profit")
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=0.6,title = "Profit")
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=0.6,title = "Profit")
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=0.6,title = "Profit")
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=0.6,title = "Profit")
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=0.6,title = "Profit")
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=0.6,title = "Profit")
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1,title = "Profit")
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=0.6,title = "Profit")
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=1.6,title = "Profit")
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=1,title = "Profit")
profitA <- c(73,100,85,115,140,165,120,150,195,190)
profitB <- c(60,95,125,170,140,165,180,170,180,190)
plot(profitA~years,type = "l", col = "red", lwd =4)
lines(profitB~years,type = "l", col = "blue", lwd =4)
profitA <- c(73,100,85,115,140,165,120,150,195,190)
profitB <- c(60,95,125,170,140,165,180,170,180,190)
plot(profitA~years,type = "l", col = "red", lwd =4)
lines(profitB~years,type = "l", col = "blue", lwd =4)
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=1,title = "Profit")
profitA <- c(73,100,85,115,140,165,120,150,195,190)
profitB <- c(60,95,125,170,140,165,180,170,180,190)
plot(profitA~years,type = "l", col = "red", lwd =4)
lines(profitB~years,type = "l", col = "blue", lwd =4)
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=0,6, cex=1,title = "Profit")
profitA <- c(73,100,85,115,140,165,120,150,195,190)
profitB <- c(60,95,125,170,140,165,180,170,180,190)
plot(profitA~years,type = "l", col = "red", lwd =4)
lines(profitB~years,type = "l", col = "blue", lwd =4)
legend(x=2012,y=115,legend = c("Company A","Company A"), col = c("red","blue"),lty=0,6, cex=1,title = "Profit")
profitA <- c(73,100,85,115,140,165,120,150,195,190)
profitB <- c(60,95,125,170,140,165,180,170,180,190)
plot(profitA~years,type = "l", col = "red", lwd =4)
lines(profitB~years,type = "l", col = "blue", lwd =4)
legend(x=2012,y=115,legend = c("Company A","Company A"), col = c("red","blue"),lty=0,6, cex=1,title = "Profit")
profitA <- c(73,100,85,115,140,165,120,150,195,190)
profitB <- c(60,95,125,170,140,165,180,170,180,190)
plot(profitA~years,type = "l", col = "red", lwd =4)
lines(profitB~years,type = "l", col = "blue", lwd =4)
legend(x=2012,y=115,legend = c("Company A","Company A"), col = c("red","blue"),lty=0,6, cex=1,title = "Profit")
profitA <- c(73,100,85,115,140,165,120,150,195,190)
profitB <- c(60,95,125,170,140,165,180,170,180,190)
plot(profitA~years,type = "l", col = "red", lwd =4)
lines(profitB~years,type = "l", col = "blue", lwd =4)
legend(x=2012,y=115,legend = c("Company A","Company A"), col = c("red","blue"),lty=0,6, cex=1,title = "Profit")
profitA <- c(73,100,85,115,140,165,120,150,195,190)
profitB <- c(60,95,125,170,140,165,180,170,180,190)
plot(profitA~years,type = "l", col = "red", lwd =4)
lines(profitB~years,type = "l", col = "blue", lwd =4)
legend(x=2012,y=115,legend = c("Company A","Company A"), col = c("red","blue"),lty=0,6, cex=1,title = "Profit")
profitA <- c(73,100,85,115,140,165,120,150,195,190)
profitB <- c(60,95,125,170,140,165,180,170,180,190)
plot(profitA~years,type = "l", col = "red", lwd =4)
lines(profitB~years,type = "l", col = "blue", lwd =4)
legend(x=2012,y=115,legend = c("Company A","Company A"), col = c("red","blue"),lty=0.6, cex=1,title = "Profit")
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=0.6,title = "Profit")
profitA <- c(73,100,85,115,140,165,120,150,195,190)
profitB <- c(60,95,125,170,140,165,180,170,180,190)
plot(profitA~years,type = "l", col = "red", lwd =4)
lines(profitB~years,type = "l", col = "blue", lwd =4)
profitA <- c(73,100,85,115,140,165,120,150,195,190)
profitB <- c(60,95,125,170,140,165,180,170,180,190)
plot(profitA~years,type = "l", col = "red", lwd =4)
lines(profitB~years,type = "l", col = "blue", lwd =4)
legend(x=2012,y=115,legend = c("Company A","Company A"),col = c("red","blue"),lty=1, cex=0.6,title = "Profit")
v <- read.csv("OnlineNewsPopularity.csv",header = FALSE,  sep = '')
v <- read.csv("OnlineNewsPopularity.csv",header = FALSE,  sep = '')
v <- read.csv("OnlineNewsPopularity.csv","rb",header = FALSE,  sep = '')
v <- read.csv("OnlineNewsPopularity.csv","rt",header = FALSE,  sep = '')
v <- read.csv("OnlineNewsPopularity","rt",header = FALSE,  sep = '')
v <- read.csv("OnlineNewsPopularity",header = TRUE,  sep = '')
str(v)
str(data)
data
data <- read.csv("OnlineNewsPopularity",header = TRUE,  sep = '')
str(data)
data <- read.csv("OnlineNewsPopularity.csv",header = TRUE,  sep = '')
data <- read.csv("OnlineNewsPopularity",header = TRUE,  sep = '')
str(data)
data <- read.csv("OnlineNewsPopularity",header = TRUE,  sep = '')
str(data)
data <- read.csv("OnlineNewsPopularity.csv",header = TRUE,  sep = '')
data <- read.csv("OnlineNewsPopularity.csv",header = TRUE,  sep = '')
data <- read.csv("OnlineNewsPopularity.csv",header = TRUE,  sep = '')
str(data)
data <- read.csv("OnlineNewsPopularity.csv",header = TRUE,  sep = ',')
data <- read.csv("OnlineNewsPopularity.csv",header = TRUE,  sep = ',')
paper <- read.csv("OnlineNewsPopularity.csv")
paper <- read.csv("OnlineNewsPopularity.csv","rt");
paper <- read.csv("OnlineNewsPopularity.csv","rt")
paper <- read.csv("wine.data")
library(caret)
v <- read.csv("wine.data",header = FALSE,  sep = '')
#str(v)
set.seed(3033)
s <- createDataPartition(y = v$V1, p = 0.7, list = FALSE)
tr <- v[s,]
te <- v[-s,]
cat("Dimensao do data-frame:",dim(v),"\n")
cat("Dimensao do treinamento:",dim(tr),"\n")
cat("Dimensao do Teste:",dim(te),"\n")
summary(v)
tr[["V19"]] = factor(tr[["V19"]])
trctrl <- trainControl(method = "boot")
set.seed(3333)
knn_fit <- train(V19~.,data = tr, method = "knn", trControl = trctrl, preProcess = c("center","scale"), tuneLength = 10)
knn_fit
teste <- predict(knn_fit, newdata = te)
teste
paper <- read.csv("wine.data")
paper <- read.csv("wine.data",header = FALSE,  sep = '')
paper <- read.csv("wine.data",header = FALSE,  sep = '')
paper <- read.csv("wine.data",header = FALSE,  sep = '')
paper <- read.csv("wine.data",header = FALSE,  sep = '')
paper <- read.csv("wine.data",header = FALSE,  sep = '')
dados <- read.csv("wine.data",header = FALSE,  sep = '')
dados <- read.csv("OnlineNewsPopularity.csv",header = FALSE,  sep = '')
str(dados)
summary(dados)
dados <- read.csv("OnlineNewsPopularity.csv",header = TRUE)
#str(dados)
summary(dados)
str(dados[["shares"]])
amostra1 = c(65.8,64.7,473,180,79.4,180,190,81.9,78.2,180,73,119,81.9,162,81.1)
amostra2 = c(256,66.2,67,149,60,60,77.8,139,72.9,71.4,67.3,76.1,213,80.7,237)
qqplot(amostra1); qqline(amostra1)
amostra1 = c(65.8,64.7,473,180,79.4,180,190,81.9,78.2,180,73,119,81.9,162,81.1)
amostra2 = c(256,66.2,67,149,60,60,77.8,139,72.9,71.4,67.3,76.1,213,80.7,237)
# Verificar se são normais
qqplot(amostra1); qqline(amostra1)
qqplot(amostra2); qqline(amostra2)
qqplot(amostra1); qqline(amostra1)
qqnorm(amostra1); qqline(amostra1)
qqnorm(amostra2); qqline(amostra2)
qqnorm(amostra1); qqline(amostra1)
qqnorm(amostra2); qqline(amostra2)
qqnorm(amostra1); qqline(amostra1)
qqnorm(amostra2); qqline(amostra2)
# Verificar se as variâncias são iguais
var(amostra1) ; var(amostra2)
var.test(amostra1, amostra2)
# Teste t
t.test(amostra1, amostra2, alternative = 'two.sided')
qqnorm(amostra2); qqline(amostra2)
qqnorm(amostra1); qqline(amostra1)
qqnorm(amostra2); qqline(amostra2)
qqnorm(amostra1); qqline(amostra1)
amostra1 = c(65.8,180,79.4,180,190,81.9,78.2,180,73,119,81.9,162,81.1)
amostra2 = c(256,66.2,67,149,60,60,77.8,139,72.9,71.4,67.3,76.1,213,80.7,237)
# Verificar se são normais
qqnorm(amostra1); qqline(amostra1)
amostra1 = c(65.8,64.7,180,79.4,180,190,81.9,78.2,180,73,119,81.9,162,81.1)
amostra2 = c(256,66.2,67,149,60,60,77.8,139,72.9,71.4,67.3,76.1,213,80.7,237)
# Verificar se são normais
qqnorm(amostra1); qqline(amostra1)
amostra1 = c(65.8,64.7,280,180,79.4,180,190,81.9,78.2,180,73,119,81.9,162,81.1)
amostra2 = c(256,66.2,67,149,60,60,77.8,139,72.9,71.4,67.3,76.1,213,80.7,237)
# Verificar se são normais
qqnorm(amostra1); qqline(amostra1)
amostra1 = c(65.8,70.7,280,180,79.4,180,190,81.9,78.2,180,73,119,81.9,162,81.1)
amostra2 = c(256,66.2,67,149,60,60,77.8,139,72.9,71.4,67.3,76.1,213,80.7,237)
# Verificar se são normais
qqnorm(amostra1); qqline(amostra1)
qqnorm(amostra2); qqline(amostra2)
amostra1 = c(65.8,70.7,280,180,79.4,180,190,81.9,78.2,180,73,119,81.9,162,81.1)
amostra2 = c(256,66.2,67,149,60,60,77.8,139,72.9,71.4,67.3,76.1,213,80.7,237)
# Verificar se são normais
qqnorm(amostra1); qqline(amostra1)
amostra1 = c(85.8,70.7,280,180,79.4,180,190,81.9,78.2,180,73,119,81.9,162,81.1)
amostra2 = c(256,66.2,67,149,60,60,77.8,139,72.9,71.4,67.3,76.1,213,80.7,237)
# Verificar se são normais
qqnorm(amostra1); qqline(amostra1)
amostra1 = c(85.8,70.7,280,180,79.4,180,190,81.9,78.2,180,73,119,81.9,162,81.1)
amostra2 = c(256,66.2,67,149,60,60,77.8,139,72.9,71.4,67.3,76.1,213,80.7,237)
# Verificar se são normais
qqnorm(amostra1,ylim = s(0,400)); qqline(amostra1)
amostra1 = c(85.8,70.7,280,180,79.4,180,190,81.9,78.2,180,73,119,81.9,162,81.1)
amostra2 = c(256,66.2,67,149,60,60,77.8,139,72.9,71.4,67.3,76.1,213,80.7,237)
# Verificar se são normais
qqnorm(amostra1,ylim = c(0,400)); qqline(amostra1)
amostra1 = c(85.8,70.7,280,180,79.4,180,190,81.9,78.2,180,73,119,81.9,162,81.1)
amostra2 = c(256,66.2,67,149,60,60,77.8,139,72.9,71.4,67.3,76.1,213,80.7,237)
# Verificar se são normais
qqnorm(amostra1,ylim = c(0,400)); qqline(amostra1)
qqnorm(amostra2, ylim = c(0,400)); qqline(amostra2)
qqnorm(amostra2, ylim = c(0,400)); qqline(amostra2)
# Verificar se as variâncias são iguais
var(amostra1) ; var(amostra2)
var.test(amostra1, amostra2)
# Teste t
t.test(amostra1, amostra2, alternative = 'two.sided')
qqnorm(amostra1,ylim = c(0,400)); qqline(amostra1)
qqnorm(amostra2, ylim = c(0,400)); qqline(amostra2)
var(amostra1) ; var(amostra2)
var.test(amostra1, amostra2)
t.test(amostra1, amostra2, alternative = 'two.sided')
# Teste t
t.test(amostra1, amostra2, alternative = 'two.sided')
# Verificar se são normais
qqnorm(amostra1,ylim = c(0,400)); qqline(amostra1)
qqnorm(amostra2, ylim = c(0,400)); qqline(amostra2)
qqnorm(amostra2, ylim = c(0,400), main("Mostra dos Vaklores de Ping Centro")); qqline(amostra2)
qqnorm(amostra2, ylim = c(0,400), main("Mostra dos Vaklores de Ping Centro")); qqline(amostra2)
qqnorm(amostra2, ylim = c(0,400), main ="Mostra dos Vaklores de Ping Centro"); qqline(amostra2)
qqnorm(amostra1,ylim = c(0,400),main ="Amostra dos Valores de Ping Centro",ylab = "Valores em Ms"); qqline(amostra1)
qqnorm(amostra2, ylim = c(0,400), main ="Amostra dos Valores de Ping Centro",ylab = "Valores em Ms"); qqline(amostra2)
qqnorm(amostra1,ylim = c(0,400),main ="Amostra dos Valores de Ping Centro",ylab = "Valores em Ms"); qqline(amostra1)
qqnorm(amostra1,ylim = c(0,400),main ="Amostra dos Valores de Ping Junco",ylab = "Valores em Ms"); qqline(amostra1)
qqnorm(amostra2, ylim = c(0,400), main ="Amostra dos Valores de Ping Centro",ylab = "Valores em Ms"); qqline(amostra2)
qqnorm(amostra1,ylim = c(0,400),main ="Amostra dos Valores de Ping Junco",ylab = "Valores em Ms"); qqline(amostra1)
qqnorm(amostra2, ylim = c(0,400), main ="Amostra dos Valores de Ping Centro",ylab = "Valores em Ms"); qqline(amostra2)
var(amostra1) ; var(amostra2)
var.test(amostra1, amostra2)
# Teste t
t.test(amostra1, amostra2, alternative = 'two.sided')
library(ISwR)
library(ISwR)
library(ISwR)
attach(thuesen)
names(thuesen)
lm(short.velocity~blood.glucose)
summary(var)
var <- lm(short.velocity~blood.glucose)
summary(var)
plot(short.velocity~blood.glucose)
plot(short.velocity~blood.glucose)
abline(var)
resid(var)
resid(var)
resid(var)
lm.velo <- lm(short.velocity~blood.glucose)
summary(lm.velo)
plot(short.velocity~blood.glucose)
abline(lm.velo)
resid(lm.velo)
list(thuesen)
plot(short.velocity~blood.glucose)
lines(blood.glucose,fitted(lm.velo))
library(ISwR)
attach(thuesen)
names(thuesen)
lm.velo <- lm(short.velocity~blood.glucose)
summary(lm.velo)
plot(short.velocity~blood.glucose)
abline(lm.velo)
resid(lm.velo)
options(lm.velo)
list(thuesen)
options(na.action=na.exclude)
plot(short.velocity~blood.glucose)
lm.velo <- lm(short.velocity~blood.glucose)
fitted(lm.velo)
fitted(lm.velo)
lines(blood.glucose,fitted(lm.velo))
fitted(lm.velo)
lines(blood.glucose,fitted(lm.velo))
segments(blood.glucose,fitted(lm.velo),blood.glucose,short.velocity)
abline(short.velocity~blood.glucose)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rattle")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rattle")
data(iris); library(ggplot2)
library(caret)
names(iris)
View(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list = FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data = training)
library(rpart)
modFit <-train(Species~.,method="rpart",data =  training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE,main = "Árvore de Classificação")
text(modFit$finalModel,use.n = TRUE,all  = TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
p <- predict(modFit,newdata = testing)
confusionMatrix(p,testing$Species)
table(p,testing$Species)
table(p,testing$Species)
p <- predict(modFit,newdata = testing)
confusionMatrix(p,testing$Species)
table(p,testing$Species)
modFit <-train(Species~.,method="rpart",data =  training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE,main = "Árvore de Classificação")
text(modFit$finalModel,use.n = TRUE,all  = TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
p <- predict(modFit,newdata = testing)
confusionMatrix(p,testing$Species)
table(p,testing$Species)
data(iris); library(ggplot2)
library(caret)
names(iris)
View(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list = FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
modFit  <-train(Species~.,method="rf",data =  training,prox = TRUE)
modFit  <-train(Species~.,method="rf",data =  training,prox = TRUE)
getTree(modFit$finalModel,k=2)
irisP <- classCenter(training[,c(3,4)],training$Species,modFit$finalModel$prox)
p <- qplot(Petal.Width,Petal.Length, col = Species, data = training)
getTree(modFit$finalModel,k=2)
irisP <- classCenter(training[,c(3,4)],training$Species,modFit$finalModel$prox)
irisP <- as.data.frame(irisP);irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width,Petal.Length, col = Species, data = training)
getTree(modFit$finalModel,k=2)
irisP <- classCenter(training[,c(3,4)],training$Species,modFit$finalModel$prox)
irisP <- as.data.frame(irisP);irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width,Petal.Length, col = Species, data = training)
p + geom_point(aes(x=Petal.Width, y = Petal.Length,col = col = Species),size=5, shape = 4, data = irisP)
p <- qplot(Petal.Width,Petal.Length, col = Species, data = training)
p + geom_point(aes(x=Petal.Width, y = Petal.Length, col = Species),size=5, shape = 4, data = irisP)
plot(modFit$finalModel, uniform = TRUE,main = "Árvore de Classificação")
text(modFit$finalModel,use.n = TRUE,all  = TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
data(iris); library(ggplot2)
library(caret)
names(iris)
View(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list = FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data = training)
library(rpart)
modFit <-train(Species~.,method="rpart",data =  training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE,main = "Árvore de Classificação")
text(modFit$finalModel,use.n = TRUE,all  = TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
data(iris); library(ggplot2)
library(caret)
names(iris)
View(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list = FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
getTree(modFit$finalModel,k=2)
irisP <- classCenter(training[,c(3,4)],training$Species,modFit$finalModel$prox)
irisP <- as.data.frame(irisP);irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width,Petal.Length, col = Species, data = training)
p + geom_point(aes(x=Petal.Width, y = Petal.Length, col = Species),size=5, shape = 4, data = irisP)
plot(modFit$finalModel, uniform = TRUE,main = "Árvore de Classificação")
text(modFit$finalModel,use.n = TRUE,all  = TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
data(iris); library(ggplot2)
library(caret)
names(iris)
View(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list = FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
getTree(modFit$finalModel,k=2)
irisP <- classCenter(training[,c(3,4)],training$Species,modFit$finalModel$prox)
irisP <- as.data.frame(irisP);irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width,Petal.Length, col = Species, data = training)
p + geom_point(aes(x=Petal.Width, y = Petal.Length, col = Species),size=5, shape = 4, data = irisP)
data(iris); library(ggplot2)
library(caret)
names(iris)
View(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list = FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
getTree(modFit$finalModel,k=2)
irisP <- classCenter(training[,c(3,4)],training$Species,modFit$finalModel$prox)
irisP <- as.data.frame(irisP);irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width,Petal.Length, col = Species, data = training)
p + geom_point(aes(x=Petal.Width, y = Petal.Length, col = Species),size=5, shape = 4, data = irisP)
pred <- predict(modFit,testing);testing$predRight <- pred==testing$Species
table(pred,testing$Species)
confusionMatrix(pred,testing$Species)
pred <- predict(modFit,testing);testing$predRight <- pred==testing$Species
table(pred,testing$Species)
confusionMatrix(pred,testing$Species)
tabela <- data.frame(testing$Species,pred)
colnames(tabela) <- c("Valor Correto","Valor Predito")
View(tabela)
tabela <- data.frame(testing$Species,pred)
table(pred,testing$Species)
pred <- predict(modFit,testing);testing$predRight <- pred==testing$Species
table(pred,testing$Species)
confusionMatrix(pred,testing$Species)
tabela <- data.frame(testing$Species,pred)
colnames(tabela) <- c("Valor Correto","Valor Predito")
View(tabela)
qplot(Petal.Whidth,Petal.Length, colour = predRight, data = testing,main ="Classificação de Novos dados")
qplot(Petal.Width,Petal.Length, colour = predRight, data = testing,main ="Classificação de Novos dados")
View(tabela)
setwd("/home/tomaz/Documentos/R\ Teste/HandsOnSistemasInteligentes/Prática\ 07/Tomaz\ Bisneto/")
setwd("/home/tomaz/Documentos/R\ Teste/HandsOnSistemasInteligentes/Prática\ 07/Tomaz\ Bisneto/")
library(jpeg)
library(ripa)
img <- readJPEG("img.jpeg")
imgGrey <- imagematrix(img, type = "grey")
image(t(imgGrey)[,nrow(imgGrey):1])
setwd("/home/tomaz/Documentos/R\ Teste/HandsOnSistemasInteligentes/Prática\ 07/Tomaz\ Bisneto/")
library(jpeg)
library(ripa)
dataMatrix <- matrix(rnorm(400),nrow = 40)
ncol(dataMatrix)
image(1:10,1:40,t(dataMatrix)[,nrow(dataMatrix):1])
heatmap(dataMatrix)
for(i in 1:40){
coinFlip <- rbinom(1,size = 1, prob = 0.5)
if(coinFlip){
dataMatrix[i,] <-  dataMatrix[i,] + rep(c(0,3), each = 5)
}
}
image(1:10,1:40,t(dataMatrix)[,nrow(dataMatrix):1])
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order,]
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
img <- readJPEG("img.jpeg")
imgGrey <- imagematrix(img, type = "grey")
image(t(imgGrey)[,nrow(imgGrey):1])
svd1 <- svd(scale(imgGrey))
plot(svd1$d^2/sum(svd1$d^2),pch = 19, xlab = "Singular Vector",ylab = "Variance explaned")
approx1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
approx20 <- svd1$u[,1:20] %*% diag(svd1$d[1:20]) %*% t(svd1$v[,1:20])
approx30 <- svd1$u[,1:30] %*% diag(svd1$d[1:30]) %*% t(svd1$v[,1:30])
approx50 <-  svd1$u[,1:50] %*% diag(svd1$d[1:50])  %*% t(svd1$v[,1:50])
approx100 <- svd1$u[,1:100] %*% diag(svd1$d[1:100]) %*% t(svd1$v[,1:100])
par(mfrow = c(1,5))
image(t(approx1)[,nrow(approx1):1])
image(t(approx20)[,nrow(approx20):1])
image(t(approx30)[,nrow(approx30):1])
image(t(approx50)[,nrow(approx50):1])
image(t(imgGrey)[,nrow(imgGrey):1])
dev.off()
svd1 <- svd(scale(imgGrey))
plot(svd1$d^2/sum(svd1$d^2),pch = 19, xlab = "Singular Vector",ylab = "Variance explaned")
approx400 <- svd1$u[,1:400] %*% diag(svd1$d[1:400]) %*% t(svd1$v[,1:400])
image(t(approx400)[,nrow(approx400):1])
image(t(approx20)[,nrow(approx20):1])
image(t(approx30)[,nrow(approx30):1])
image(t(approx100)[,nrow(approx100):1])
