install.packages("ggplot2")
library(ggplot2)
library("ggplot2"")
s
w2
clearPushBack()
library("ggplot2")
library("caret")
install.packages("rpart")
install.packages("rpart")
install.packages("rattle")
data(iris);library(ggplot2)
data(iris);library(ggplot2)
libary(caret)
library(caret)
View(iris)
table(iris$Species)
data(iris);library(ggplot2)
library(caret)
View(iris)
table(iris$Species)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training);dim(testing)
plot(modFit$finalModel, uniform = TRUE, main ="Arvore de Classificação")
print(modFit$finalModel)
data(iris);library(ggplot2)
library(caret)
View(iris)
table(iris$Species)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training);dim(testing)
qplot(Petal.Width,Sepal.Width, colour=Species, data = training)
library(rpart)
modFit <- train(Species~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main ="Arvore de Classificação")
data(iris);library(ggplot2)
library(caret)
View(iris)
table(iris$Species)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training);dim(testing)
qplot(Petal.Width,Sepal.Width, colour=Species, data = training)
library(rpart)
modFit <- train(Species~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main ="Arvore de Classificação")
text(modFit$finalModel,use.n=True, all = True, cex =0)
text(modFit$finalModel,use.n=TRUE, all = TRUE, cex =0)
text(modFit$finalModel,use.n=TRUE, all = TRUE, cex =0)
data(iris);library(ggplot2)
library(caret)
View(iris)
table(iris$Species)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training);dim(testing)
qplot(Petal.Width,Sepal.Width, colour=Species, data = training)
library(rpart)
modFit <- train(Species~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main ="Arvore de Classificação")
text(modFit$finalModel,use.n=TRUE, all = TRUE, cex =.8)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main ="Arvore de Classificação")
text(modFit$finalModel,use.n=TRUE, all = TRUE, cex =.8)
qplot(Petal.Width,Sepal.Width, colour=Species, data = training)
library(rpart)
data(iris);library(ggplot2)
library(caret)
View(iris)
table(iris$Species)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training);dim(testing)
qplot(Petal.Width,Sepal.Width, colour=Species, data = training)
library(rpart)
modFit <- train(Species~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main ="Arvore de Classificação")
text(modFit$finalModel,use.n=TRUE, all = TRUE, cex =.8)
library(rattle)
library(rattle)
library(rattle)
library(rattle)
library(rattle)
p<-predict(modFit,newdata=testing)
fancyRpartPlot(modFit$finalModel)
library("ripa")
library("jpeg")
flower <- readJPEG("flor.jpeg")
mat <- imagematrix(flower, type="grey")
svdF <- svd(mat)
plot(svdF$d^2/sum(svdF$d^2), pch=19)
approx1 <- svdF$u[,1] %*% t(svdF$u[,1]) * svdF$d[1]
approx5 <- svdF$u[,1:5] %*% diag(svdF$d[1:5])%*% t(svdF$v[,1:5])
approx10 <- svdF$u[,1:10] %*% diag(svdF$d[1:10])%*% t(svdF$v[,1:10])
approx300 <- svdF$u[,1:300] %*% diag(svdF$d[1:300])%*% t(svdF$v[,1:300])
#Valor escolhido
approx35 <-  svdF$u[,1:35] %*% diag(svdF$d[1:35])%*% t(svdF$v[,1:35])
par(mfrow=c(1,4))
image(t(approx1)[,nrow(approx1):1])
image(t(approx5)[,nrow(approx5):1])
image(t(approx10)[,nrow(approx10):1])
image(t(approx300)[,nrow(approx300):1])
image(t(approx35)[,nrow(approx35):1])
install.packages("ripa")
install.packages("jpeg")
dowlibrary("ripa")
library("jpeg")
flower <- readJPEG("flor.jpeg")
mat <- imagematrix(flower, type="grey")
svdF <- svd(mat)
plot(svdF$d^2/sum(svdF$d^2), pch=19)
approx1 <- svdF$u[,1] %*% t(svdF$u[,1]) * svdF$d[1]
approx5 <- svdF$u[,1:5] %*% diag(svdF$d[1:5])%*% t(svdF$v[,1:5])
approx10 <- svdF$u[,1:10] %*% diag(svdF$d[1:10])%*% t(svdF$v[,1:10])
approx300 <- svdF$u[,1:300] %*% diag(svdF$d[1:300])%*% t(svdF$v[,1:300])
#Valor escolhido
approx35 <-  svdF$u[,1:35] %*% diag(svdF$d[1:35])%*% t(svdF$v[,1:35])
par(mfrow=c(1,4))
image(t(approx1)[,nrow(approx1):1])
image(t(approx5)[,nrow(approx5):1])
image(t(approx10)[,nrow(approx10):1])
image(t(approx300)[,nrow(approx300):1])
image(t(approx35)[,nrow(approx35):1])
install.packages("jpeg")
install.packages("jpeg")
dowlibrary("ripa")
library("jpeg")
flower <- readJPEG("flor.jpeg")
mat <- imagematrix(flower, type="grey")
svdF <- svd(mat)
plot(svdF$d^2/sum(svdF$d^2), pch=19)
approx1 <- svdF$u[,1] %*% t(svdF$u[,1]) * svdF$d[1]
approx5 <- svdF$u[,1:5] %*% diag(svdF$d[1:5])%*% t(svdF$v[,1:5])
approx10 <- svdF$u[,1:10] %*% diag(svdF$d[1:10])%*% t(svdF$v[,1:10])
approx300 <- svdF$u[,1:300] %*% diag(svdF$d[1:300])%*% t(svdF$v[,1:300])
#Valor escolhido
approx35 <-  svdF$u[,1:35] %*% diag(svdF$d[1:35])%*% t(svdF$v[,1:35])
par(mfrow=c(1,4))
image(t(approx1)[,nrow(approx1):1])
image(t(approx5)[,nrow(approx5):1])
image(t(approx10)[,nrow(approx10):1])
image(t(approx300)[,nrow(approx300):1])
image(t(approx35)[,nrow(approx35):1])
require(ggplot2)
library(corrplot)
require(corrplot)
source('C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis/daviLuis.R')
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
require(dplyr)
require(ggplot2)
require(caret)
teste <- read.csv("teste.csv",header = TRUE)
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
require(dplyr)
require(ggplot2)
require(caret)
teste <- read.csv("teste.csv",header = TRUE)
View(teste)
View(teste)
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
require(dplyr)
require(ggplot2)
require(caret)
teste <- read.csv("teste.csv",header = TRUE)
teste2 <- na.omit(teste)
treinamento <- createDataPartition(teste2$V3 , p = 0.75, list = FALSE)
treinamentoTeste <- teste2[treinamento,]
testeTreinamento <- teste2[-treinamento,]
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
require(dplyr)
require(ggplot2)
require(caret)
teste <- read.csv("teste.csv",header = TRUE)
teste2 <- na.omit(teste)
treinamento <- createDataPartition(teste2$V3 , p = 0.76, list = FALSE)
treinamentoTeste <- teste2[treinamento,]
testeTreinamento <- teste2[-treinamento,]
fitControl <- trainControl(method="cv", number = 10)
control <- trainControl(method="cv", number = 10)
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
require(dplyr)
require(ggplot2)
require(caret)
teste <- read.csv("teste.csv",header = TRUE)
teste2 <- na.omit(teste)
treinamento <- createDataPartition(teste2$V3 , p = 0.76, list = FALSE)
treinamentoTeste <- teste2[treinamento,]
testeTreinamento <- teste2[-treinamento,]
control <- trainControl(method="cv", number = 10)
lm <- lm(V2 ~ V3 + V8 + V9 + V1  + V4 + V5 + V6 + V7, data = teste2)
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
require(dplyr)
require(ggplot2)
require(caret)
teste <- read.csv("teste.csv",header = TRUE)
teste2 <- na.omit(teste)
treinamento <- createDataPartition(teste2$V3 , p = 0.76, list = FALSE)
treinamentoTeste <- teste2[treinamento,]
testeTreinamento <- teste2[-treinamento,]
control <- trainControl(method="cv", number = 10)
lm <- lm(V1 ~ V2 + V3 + V4 + V5 + V6 + V7 + V8 + V9, data = teste2)
predicao <- predict(fit,newdata = teste)
predicao <- predict(teste2,newdata = teste)
source('C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis/daviLuis.R')
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
require(dplyr)
require(ggplot2)
require(caret)
teste <- read.csv("teste.csv",header = TRUE)
teste2 <- na.omit(teste)
treinamento <- createDataPartition(teste2$V3 , p = 0.76, list = FALSE)
treinamentoTeste <- teste2[treinamento,]
testeTreinamento <- teste2[-treinamento,]
control <- trainControl(method="cv", number = 10)
lm <- lm(V1 ~ V2 + V3 + V4 + V5 + V6 + V7 + V8 + V9, data = teste2)
predicao <- predict(lm, select(testeTreinamento, V1, V2, V3, V4, V5, V6, V7, V8, V9))
+lm_predicao <- data.frame(pred = predicao, obs = testeTreinamento$V3)
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
require(dplyr)
require(ggplot2)
require(caret)
teste <- read.csv("teste.csv",header = TRUE)
teste2 <- na.omit(teste)
treinamento <- createDataPartition(teste2$V3 , p = 0.76, list = FALSE)
treinamentoTeste <- teste2[treinamento,]
testeTreinamento <- teste2[-treinamento,]
control <- trainControl(method="cv", number = 10)
lm <- lm(V1 ~ V2 + V3 + V4 + V5 + V6 + V7 + V8 + V9, data = teste2)
predicao <- predict(lm, select(testeTreinamento, V1, V2, V3, V4, V5, V6, V7, V8, V9))
lm_predicao <- data.frame(pred = predicao, obs = testeTreinamento$V3)
ggplot(lm_predicao, aes(x = pred, y = obs)) +
geom_point(alpha = 0.5, position = position_jitter(width = 0.2)) +
geom_abline(colour = "blue") + ggtitle("Grafico de Previsão x Observado")
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
require(dplyr)
require(ggplot2)
require(caret)
teste <- read.csv("teste.csv",header = TRUE)
teste2 <- na.omit(teste)
treinamento <- createDataPartition(teste2$V3 , p = 0.76, list = FALSE)
treinamentoTeste <- teste2[treinamento,]
testeTreinamento <- teste2[-treinamento,]
control <- trainControl(method="cv", number = 10)
lm <- lm(V1 ~ V2 + V3 + V4 + V5 + V6 + V7 + V8 + V9, data = teste2)
predicao <- predict(lm, select(testeTreinamento, V1, V2, V3, V4, V5, V6, V7, V8, V9))
lm_predicao <- data.frame(pred = predicao, obs = testeTreinamento$V2)
ggplot(lm_predicao, aes(x = pred, y = obs)) +
geom_point(alpha = 0.5, position = position_jitter(width = 0.2)) +
geom_abline(colour = "black") + ggtitle("Grafico de Previsão x Observado")
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
require(dplyr)
require(ggplot2)
require(caret)
teste <- read.csv("teste.csv",header = TRUE)
teste2 <- na.omit(teste)
treinamento <- createDataPartition(teste2$V3 , p = 0.76, list = FALSE)
treinamentoTeste <- teste2[treinamento,]
testeTreinamento <- teste2[-treinamento,]
control <- trainControl(method="cv", number = 10)
lm <- lm(V1 ~ V2 + V3 + V4 + V5 + V6 + V7 + V8 + V9, data = teste2)
predicao <- predict(lm, select(testeTreinamento, V1, V2, V3, V4, V5, V6, V7, V8, V9))
lm_predicao <- data.frame(pred = predicao, obs = testeTreinamento$V2)
ggplot(lm_predicao, aes(x = pred, y = obs)) +
geom_point(alpha = 0.5, position = position_jitter(width = 0.2)) +
geom_abline(colour = "black") + ggtitle("Grafico de Previsão x Observado")
round(defaultSummary(prediction),digits = 3)
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
require(dplyr)
require(ggplot2)
require(caret)
teste <- read.csv("teste.csv",header = TRUE)
teste2 <- na.omit(teste)
treinamento <- createDataPartition(teste2$V3 , p = 0.76, list = FALSE)
treinamentoTeste <- teste2[treinamento,]
testeTreinamento <- teste2[-treinamento,]
control <- trainControl(method="cv", number = 10)
lm <- lm(V1 ~ V2 + V3 + V4 + V5 + V6 + V7 + V8 + V9, data = teste2)
predicao <- predict(lm, select(testeTreinamento, V1, V2, V3, V4, V5, V6, V7, V8, V9))
lm_predicao <- data.frame(pred = predicao, obs = testeTreinamento$V2)
ggplot(lm_predicao, aes(x = pred, y = obs)) +
geom_point(alpha = 0.5, position = position_jitter(width = 0.2)) +
geom_abline(colour = "black") + ggtitle("Grafico de Previsão x Observado")
round(defaultSummary(predicao),digits = 3)
round(defaultSummary(predicao),digits = 3)
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
require(dplyr)
require(ggplot2)
require(caret)
teste <- read.csv("teste.csv",header = TRUE)
teste2 <- na.omit(teste)
treinamento <- createDataPartition(teste2$V3 , p = 0.76, list = FALSE)
treinamentoTeste <- teste2[treinamento,]
testeTreinamento <- teste2[-treinamento,]
control <- trainControl(method="cv", number = 10)
lm <- lm(V1 ~ V2 + V3 + V4 + V5 + V6 + V7 + V8 + V9, data = teste2)
predicao <- predict(lm, select(testeTreinamento, V1, V2, V3, V4, V5, V6, V7, V8, V9))
lm_predicao <- data.frame(pred = predicao, obs = testeTreinamento$V2)
ggplot(lm_predicao, aes(x = pred, y = obs)) +
geom_point(alpha = 0.5, position = position_jitter(width = 0.2)) +
geom_abline(colour = "black") + ggtitle("Grafico de Previsão x Observado")
round(defaultSummary(lm_predicao),digits = 3)
setwd("C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis")
require(dplyr)
require(ggplot2)
require(caret)
teste <- read.csv("teste.csv",header = TRUE)
teste2 <- na.omit(teste)
treinamento <- createDataPartition(teste2$V3 , p = 0.76, list = FALSE)
treinamentoTeste <- teste2[treinamento,]
testeTreinamento <- teste2[-treinamento,]
control <- trainControl(method="cv", number = 10)
lm <- lm(V1 ~ V2 + V3 + V4 + V5 + V6 + V7 + V8 + V9, data = teste2)
predicao <- predict(lm, select(testeTreinamento, V1, V2, V3, V4, V5, V6, V7, V8, V9))
lm_predicao <- data.frame(pred = predicao, obs = testeTreinamento$V2)
ggplot(lm_predicao, aes(x = pred, y = obs)) +
geom_point(alpha = 0.5, position = position_jitter(width = 0.2)) +
geom_abline(colour = "black") + ggtitle("Grafico de Previsão x Observado")
round(defaultSummary(lm_predicao),digits = 4)
source('C:/Users/davil/Desktop/6 periodo/SistemasInteligentes/HandsOnSistemasInteligentes/HandsOnSistemasInteligentes/Trabalho Final/Davi Luis/daviLuis.R')
